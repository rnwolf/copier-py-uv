[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{ project_slug }}"
version = "0.1.0"
description = "{{ project_description }}"
readme = "README.md"
license = {file = "LICENSE.md"}
requires-python = ">={{ python_version }}"
authors = [
    {name = "{{ author_name }}", email = "{{ author_email }}"},
]
keywords = [{% for keyword in keywords.split(',') %}"{{ keyword.strip() }}"{% if not loop.last %}, {% endif %}{% endfor %}]
classifiers = [
    "Development Status :: {{ development_status }}",
    "Intended Audience :: Developers",
    {% if license == "MIT" %}"License :: OSI Approved :: MIT License",{% endif %}
    {% if license == "Apache-2.0" %}"License :: OSI Approved :: Apache Software License",{% endif %}
    {% if license == "GPL-3.0" %}"License :: OSI Approved :: GNU General Public License v3 (GPLv3)",{% endif %}
    {% if license == "BSD-3-Clause" %}"License :: OSI Approved :: BSD License",{% endif %}
    "Programming Language :: Python :: 3",
    {% if python_version == "3.9" %}"Programming Language :: Python :: 3.9",{% endif %}
    {% if python_version in ["3.9", "3.10"] %}"Programming Language :: Python :: 3.10",{% endif %}
    {% if python_version in ["3.9", "3.10", "3.11"] %}"Programming Language :: Python :: 3.11",{% endif %}
    {% if python_version in ["3.9", "3.10", "3.11", "3.12"] %}"Programming Language :: Python :: 3.12",{% endif %}
    {% if python_version in ["3.9", "3.10", "3.11", "3.12", "3.13"] %}"Programming Language :: Python :: 3.13",{% endif %}
]
dependencies = [
    {% if include_cli %}"click>=8.0",  # for CLI interface{% endif %}
    "loguru>=0.7.0",  # for logging
]

[project.optional-dependencies]
dev = [
    {% if use_pytest %}"pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-xdist>=3.0",  # parallel testing{% endif %}
    {% if use_ruff %}"ruff>=0.1.0",{% endif %}
    {% if use_pyright %}"pyright>=1.1.350",{% endif %}
    {% if include_pre_commit %}"pre-commit>=3.0",{% endif %}
    {% if include_cli %}"click>=8.0",  # for testing CLI{% endif %}
    "duty>=1.4.0",  # task runner
]
{% if include_docs %}docs = [
    "mkdocs>=1.5",
    "mkdocs-material>=9.0",
    "mkdocstrings[python]>=0.20",
    "mkdocs-gen-files>=0.5",
    "mkdocs-literate-nav>=0.6",
]{% endif %}

[project.urls]
Homepage = "https://github.com/{{ github_username }}/{{ project_slug }}"
Repository = "https://github.com/{{ github_username }}/{{ project_slug }}"
Issues = "https://github.com/{{ github_username }}/{{ project_slug }}/issues"

{% if include_cli %}[project.scripts]
{{ project_slug }} = "{{ package_name }}.cli:main"{% endif %}

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true

{% if use_pytest %}[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--cov=src/{{ package_name }}",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]{% endif %}

{% if use_ruff %}[tool.ruff]
target-version = "py{{ python_version.replace('.', '') }}"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # allow asserts in tests{% endif %}

{% if use_pyright %}[tool.pyright]
pythonVersion = "{{ python_version }}"
include = ["src"]
exclude = [
    "**/__pycache__",
    "**/.pytest_cache",
    "**/node_modules",
    "**/.venv",
    "**/.*",
]
defineConstant = { DEBUG = true }
stubPath = "src/stubs"
venvPath = "."
venv = ".venv"

# Type checking settings
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
reportImportCycles = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = false
reportPrivateImportUsage = true
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportInconsistentConstructor = true
reportOverlappingOverloads = true
reportMissingSuperCall = false
reportUninitializedInstanceVariable = true
reportInvalidStringEscapeSequence = true
reportUnknownParameterType = true
reportUnknownArgumentType = true
reportUnknownLambdaType = true
reportUnknownVariableType = true
reportUnknownMemberType = false
reportMissingParameterType = true
reportMissingTypeArgument = true
reportInvalidTypeVarUse = true
reportCallInDefaultInitializer = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportImplicitStringConcatenation = false
reportUndefinedVariable = true
reportUnboundVariable = true{% endif %}