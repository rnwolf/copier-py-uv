"""Utility functions for {{ project_name }}."""

import os
import sys
from pathlib import Path
from typing import Any
from loguru import logger


def configure_logging(
    level: str = "INFO",
    format_string: str | None = None,
    file_path: str | Path | None = None
) -> None:
    """Configure logging for the application.

    Args:
        level: Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
        format_string: Custom format string for log messages
        file_path: Optional file path to write logs to

    Example:
        >>> configure_logging("DEBUG", file_path="app.log")
        >>> logger.info("Logging configured")
    """
    # Remove default handler
    logger.remove()

    # Set default format if none provided
    if format_string is None:
        format_string = (
            "<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
            "<level>{level: <8}</level> | "
            "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> | "
            "<level>{message}</level>"
        )

    # Add console handler
    logger.add(
        sys.stderr,
        format=format_string,
        level=level,
        colorize=True
    )

    # Add file handler if specified
    if file_path:
        logger.add(
            file_path,
            format=format_string,
            level=level,
            rotation="10 MB",
            retention="1 week"
        )

    logger.info("Logging configured with level: {}", level)


def get_project_root() -> Path:
    """Get the project root directory.

    Returns:
        Path object pointing to the project root

    Example:
        >>> root = get_project_root()
        >>> print(root.name)
        {{ project_slug }}
    """
    # Start from current file and go up until we find pyproject.toml
    current = Path(__file__).parent

    while current != current.parent:
        if (current / "pyproject.toml").exists():
            return current
        current = current.parent

    # Fallback to current working directory
    return Path.cwd()


def load_environment_variables(env_file: str | Path | None = None) -> dict[str, str]:
    """Load environment variables from a .env file.

    Args:
        env_file: Path to the .env file. If None, looks for .env in project root

    Returns:
        Dictionary of environment variables that were loaded

    Example:
        >>> env_vars = load_environment_variables()
        >>> debug_mode = env_vars.get("DEBUG", "false").lower() == "true"
    """
    if env_file is None:
        env_file = get_project_root() / ".env"

    env_file = Path(env_file)
    loaded_vars = {}

    if not env_file.exists():
        logger.debug("Environment file not found: {}", env_file)
        return loaded_vars

    try:
        with open(env_file, "r", encoding="utf-8") as f:
            for line_num, line in enumerate(f, 1):
                line = line.strip()

                # Skip empty lines and comments
                if not line or line.startswith("#"):
                    continue

                # Parse KEY=VALUE format
                if "=" in line:
                    key, value = line.split("=", 1)
                    key = key.strip()
                    value = value.strip().strip('"').strip("'")

                    # Set environment variable if not already set
                    if key not in os.environ:
                        os.environ[key] = value
                        loaded_vars[key] = value
                        logger.debug("Loaded env var: {}=***", key)
                else:
                    logger.warning("Invalid line {} in {}: {}", line_num, env_file, line)

    except Exception as e:
        logger.error("Error loading environment file {}: {}", env_file, e)

    logger.info("Loaded {} environment variables from {}", len(loaded_vars), env_file)
    return loaded_vars


def ensure_directory(path: str | Path) -> Path:
    """Ensure a directory exists, creating it if necessary.

    Args:
        path: Directory path to ensure exists

    Returns:
        Path object of the ensured directory

    Raises:
        OSError: If directory cannot be created

    Example:
        >>> output_dir = ensure_directory("output/data")
        >>> print(output_dir.exists())
        True
    """
    path = Path(path)

    try:
        path.mkdir(parents=True, exist_ok=True)
        logger.debug("Ensured directory exists: {}", path)
        return path
    except OSError as e:
        logger.error("Failed to create directory {}: {}", path, e)
        raise


def safe_file_write(
    file_path: str | Path,
    content: str,
    encoding: str = "utf-8",
    backup: bool = True
) -> None:
    """Safely write content to a file with optional backup.

    Args:
        file_path: Path to the file to write
        content: Content to write to the file
        encoding: File encoding (default: utf-8)
        backup: Whether to create a backup if file exists

    Raises:
        OSError: If file cannot be written

    Example:
        >>> safe_file_write("config.txt", "key=value\\n")
    """
    file_path = Path(file_path)

    # Create backup if file exists and backup is requested
    if backup and file_path.exists():
        backup_path = file_path.with_suffix(f"{file_path.suffix}.bak")
        try:
            backup_path.write_bytes(file_path.read_bytes())
            logger.debug("Created backup: {}", backup_path)
        except OSError as e:
            logger.warning("Failed to create backup {}: {}", backup_path, e)

    # Ensure parent directory exists
    ensure_directory(file_path.parent)

    # Write content to file
    try:
        with open(file_path, "w", encoding=encoding) as f:
            f.write(content)
        logger.debug("Wrote {} characters to {}", len(content), file_path)
    except OSError as e:
        logger.error("Failed to write file {}: {}", file_path, e)
        raise


def format_file_size(size_bytes: int) -> str:
    """Format file size in human-readable format.

    Args:
        size_bytes: Size in bytes

    Returns:
        Formatted size string (e.g., "1.5 MB")

    Example:
        >>> print(format_file_size(1536))
        1.5 KB
    """
    if size_bytes == 0:
        return "0 B"

    units = ["B", "KB", "MB", "GB", "TB"]
    unit_index = 0
    size = float(size_bytes)

    while size >= 1024 and unit_index < len(units) - 1:
        size /= 1024
        unit_index += 1

    if unit_index == 0:
        return f"{int(size)} {units[unit_index]}"
    else:
        return f"{size:.1f} {units[unit_index]}"


def flatten_dict(
    nested_dict: dict[str, Any],
    separator: str = ".",
    prefix: str = ""
) -> dict[str, Any]:
    """Flatten a nested dictionary.

    Args:
        nested_dict: Dictionary to flatten
        separator: Separator for nested keys
        prefix: Prefix for all keys

    Returns:
        Flattened dictionary

    Example:
        >>> nested = {"a": {"b": {"c": 1}}, "d": 2}
        >>> flat = flatten_dict(nested)
        >>> print(flat)
        {"a.b.c": 1, "d": 2}
    """
    flattened = {}

    for key, value in nested_dict.items():
        new_key = f"{prefix}{separator}{key}" if prefix else key

        if isinstance(value, dict):
            flattened.update(flatten_dict(value, separator, new_key))
        else:
            flattened[new_key] = value

    return flattened