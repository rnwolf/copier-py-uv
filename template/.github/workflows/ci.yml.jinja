{% if include_github_actions %}name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: {% raw %}${{ matrix.os }}{% endraw %}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [{% if python_version in ["3.13"] %}"3.13"{% endif %}]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python {% raw %}${{ matrix.python-version }}{% endraw %}
      uses: actions/setup-python@v4
      with:
        python-version: {% raw %}${{ matrix.python-version }}{% endraw %}

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Set up virtual environment
      run: |
        uv venv
        echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV
        echo ".venv/bin" >> $GITHUB_PATH
      shell: bash

    - name: Install dependencies
      run: |
        uv pip install -e ".[dev{% if include_docs %},docs{% endif %}]"

    {% if use_ruff %}- name: Lint with ruff
      run: |
        ruff check .
        ruff format --check .
    {% endif %}

    {% if use_pyright %}- name: Type check with pyright
      run: |
        pyright
    {% endif %}

    - name: Test with {% if use_pytest %}pytest{% else %}unittest{% endif %}
      run: |
        {% if use_pytest %}pytest --cov=src/{{ package_name }} --cov-report=xml --cov-report=term-missing{% else %}python -m unittest discover tests{% endif %}

    {% if use_pytest %}- name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    {% endif %}

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "{{ python_version }}"

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Install build dependencies
      run: |
        uv pip install --system build

    - name: Build package
      run: |
        uv build

    - name: Check package
      run: |
        uv build --check

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  {% if include_docs %}docs:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "{{ python_version }}"

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv pip install --system -e ".[docs]"

    - name: Build documentation
      run: |
        mkdocs build

    - name: Upload docs artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docs
        path: site/

    - name: Deploy to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
        publish_dir: ./site
  {% endif %}

  publish:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "{{ python_version }}"

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Build and publish package
      env:
        UV_PUBLISH_TOKEN: {% raw %}${{ secrets.PYPI_API_TOKEN }}{% endraw %}
      run: |
        uv build
        uv publish

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "{{ python_version }}"

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"
        uv pip install --system safety bandit

    - name: Run safety check
      run: |
        safety check
      continue-on-error: true

    - name: Run bandit security check
      run: |
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
      if: always()
{% else %}# GitHub Actions CI/CD

name: CI

# GitHub Actions workflow is not enabled for this project.
# To enable CI/CD, set include_github_actions=true in your copier configuration.

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  placeholder:
    runs-on: ubuntu-latest
    steps:
    - name: Placeholder job
      run: |
        echo "GitHub Actions CI/CD is not enabled for this project"
        echo "To enable, set include_github_actions=true in your copier configuration"
{% endif %}