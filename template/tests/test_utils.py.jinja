"""Test utility functions for {{ project_name }}."""

{% if use_pytest %}import os
import tempfile
from pathlib import Path
from unittest.mock import mock_open, patch

import pytest

from {{ package_name }}.utils import (
    configure_logging,
    ensure_directory,
    flatten_dict,
    format_file_size,
    get_project_root,
    load_environment_variables,
    safe_file_write,
)


def test_configure_logging_basic():
    """Test basic logging configuration."""
    # This test mainly ensures the function doesn't crash
    configure_logging("INFO")
    # We can't easily test the actual logging output without complex mocking


def test_configure_logging_with_file(temp_directory):
    """Test logging configuration with file output."""
    log_file = temp_directory / "test.log"
    configure_logging("DEBUG", file_path=log_file)

    # Log file should be created (though it might be empty initially)
    # We can't easily test the content without generating log messages


def test_configure_logging_custom_format():
    """Test logging configuration with custom format."""
    custom_format = "{time} | {level} | {message}"
    configure_logging("INFO", format_string=custom_format)
    # Function should complete without error


def test_get_project_root():
    """Test getting project root directory."""
    root = get_project_root()
    assert isinstance(root, Path)
    assert root.exists()
    # The root should be a directory
    assert root.is_dir()


def test_get_project_root_finds_pyproject_toml():
    """Test that project root contains pyproject.toml or falls back gracefully."""
    root = get_project_root()
    # Either finds pyproject.toml or returns current working directory
    assert root.is_dir()


def test_load_environment_variables_nonexistent_file():
    """Test loading environment variables from nonexistent file."""
    result = load_environment_variables("nonexistent.env")
    assert isinstance(result, dict)
    assert len(result) == 0


def test_load_environment_variables_valid_file(temp_env_file):
    """Test loading environment variables from valid file."""
    # Clean up any existing env vars that might interfere
    test_vars = ["DEBUG", "LOG_LEVEL", "TEST_VAR", "API_KEY"]
    original_values = {}
    for var in test_vars:
        if var in os.environ:
            original_values[var] = os.environ[var]
            del os.environ[var]

    try:
        result = load_environment_variables(temp_env_file)

        assert isinstance(result, dict)
        assert len(result) > 0

        # Check that variables were loaded into os.environ
        assert os.environ.get("DEBUG") == "true"
        assert os.environ.get("LOG_LEVEL") == "DEBUG"
        assert os.environ.get("TEST_VAR") == "test_value"

    finally:
        # Restore original environment
        for var in test_vars:
            if var in os.environ:
                del os.environ[var]
        for var, value in original_values.items():
            os.environ[var] = value


def test_load_environment_variables_existing_vars(temp_directory):
    """Test that existing environment variables are not overwritten."""
    # Set an environment variable
    os.environ["EXISTING_VAR"] = "original_value"

    # Create env file with same variable
    env_file = temp_directory / ".env"
    env_file.write_text("EXISTING_VAR=new_value\n")

    try:
        result = load_environment_variables(env_file)

        # Should not overwrite existing variable
        assert os.environ["EXISTING_VAR"] == "original_value"
        assert "EXISTING_VAR" not in result  # Not in loaded vars since it wasn't set

    finally:
        if "EXISTING_VAR" in os.environ:
            del os.environ["EXISTING_VAR"]


def test_load_environment_variables_malformed_file(temp_directory):
    """Test loading environment variables from malformed file."""
    env_file = temp_directory / ".env"
    env_content = """
# Valid comment
VALID_VAR=valid_value
invalid_line_without_equals
ANOTHER_VALID=another_value
=invalid_empty_key
"""
    env_file.write_text(env_content)

    result = load_environment_variables(env_file)

    # Should load valid variables and skip invalid ones
    assert "VALID_VAR" in result or os.environ.get("VALID_VAR") == "valid_value"
    assert "ANOTHER_VALID" in result or os.environ.get("ANOTHER_VALID") == "another_value"

    # Clean up
    for var in ["VALID_VAR", "ANOTHER_VALID"]:
        if var in os.environ:
            del os.environ[var]


def test_ensure_directory_new_directory(temp_directory):
    """Test creating a new directory."""
    new_dir = temp_directory / "new" / "nested" / "directory"
    assert not new_dir.exists()

    result = ensure_directory(new_dir)

    assert result == new_dir
    assert new_dir.exists()
    assert new_dir.is_dir()


def test_ensure_directory_existing_directory(temp_directory):
    """Test ensuring an existing directory."""
    result = ensure_directory(temp_directory)

    assert result == temp_directory
    assert temp_directory.exists()
    assert temp_directory.is_dir()


def test_ensure_directory_string_path(temp_directory):
    """Test ensure_directory with string path."""
    new_dir_str = str(temp_directory / "string_path")
    result = ensure_directory(new_dir_str)

    assert isinstance(result, Path)
    assert result.exists()
    assert result.is_dir()


def test_safe_file_write_new_file(temp_directory):
    """Test writing to a new file."""
    file_path = temp_directory / "new_file.txt"
    content = "Hello, world!"

    safe_file_write(file_path, content)

    assert file_path.exists()
    assert file_path.read_text() == content


def test_safe_file_write_existing_file_with_backup(temp_directory):
    """Test writing to existing file with backup."""
    file_path = temp_directory / "existing_file.txt"
    original_content = "Original content"
    new_content = "New content"

    # Create original file
    file_path.write_text(original_content)

    # Write new content
    safe_file_write(file_path, new_content, backup=True)

    # Check new content
    assert file_path.read_text() == new_content

    # Check backup exists
    backup_path = file_path.with_suffix(f"{file_path.suffix}.bak")
    assert backup_path.exists()
    assert backup_path.read_text() == original_content


def test_safe_file_write_no_backup(temp_directory):
    """Test writing to existing file without backup."""
    file_path = temp_directory / "existing_file.txt"
    original_content = "Original content"
    new_content = "New content"

    # Create original file
    file_path.write_text(original_content)

    # Write new content without backup
    safe_file_write(file_path, new_content, backup=False)

    # Check new content
    assert file_path.read_text() == new_content

    # Check no backup exists
    backup_path = file_path.with_suffix(f"{file_path.suffix}.bak")
    assert not backup_path.exists()


def test_safe_file_write_custom_encoding(temp_directory):
    """Test writing file with custom encoding."""
    file_path = temp_directory / "encoded_file.txt"
    content = "Hello, 世界!"  # Content with unicode

    safe_file_write(file_path, content, encoding="utf-8")

    assert file_path.exists()
    assert file_path.read_text(encoding="utf-8") == content


@pytest.mark.parametrize("size_bytes,expected", [
    (0, "0 B"),
    (512, "512 B"),
    (1024, "1.0 KB"),
    (1536, "1.5 KB"),
    (1048576, "1.0 MB"),
    (1073741824, "1.0 GB"),
    (1099511627776, "1.0 TB"),
])
def test_format_file_size(size_bytes, expected):
    """Test file size formatting with various sizes."""
    result = format_file_size(size_bytes)
    assert result == expected


def test_format_file_size_large_numbers():
    """Test file size formatting with very large numbers."""
    # Test a large number
    large_size = 1234567890123
    result = format_file_size(large_size)
    assert "TB" in result
    assert isinstance(result, str)


def test_flatten_dict_simple():
    """Test flattening a simple nested dictionary."""
    nested = {
        "a": 1,
        "b": {
            "c": 2,
            "d": 3
        }
    }

    expected = {
        "a": 1,
        "b.c": 2,
        "b.d": 3
    }

    result = flatten_dict(nested)
    assert result == expected


def test_flatten_dict_deep_nesting():
    """Test flattening deeply nested dictionary."""
    nested = {
        "a": {
            "b": {
                "c": {
                    "d": 1
                }
            }
        }
    }

    expected = {
        "a.b.c.d": 1
    }

    result = flatten_dict(nested)
    assert result == expected


def test_flatten_dict_custom_separator():
    """Test flattening with custom separator."""
    nested = {
        "a": {
            "b": 1
        }
    }

    expected = {
        "a_b": 1
    }

    result = flatten_dict(nested, separator="_")
    assert result == expected


def test_flatten_dict_with_prefix():
    """Test flattening with prefix."""
    nested = {
        "a": {
            "b": 1
        }
    }

    expected = {
        "prefix.a.b": 1
    }

    result = flatten_dict(nested, prefix="prefix")
    assert result == expected


def test_flatten_dict_mixed_types():
    """Test flattening dictionary with mixed value types."""
    nested = {
        "string": "value",
        "number": 42,
        "list": [1, 2, 3],
        "nested": {
            "bool": True,
            "none": None
        }
    }

    result = flatten_dict(nested)

    assert result["string"] == "value"
    assert result["number"] == 42
    assert result["list"] == [1, 2, 3]
    assert result["nested.bool"] is True
    assert result["nested.none"] is None


def test_flatten_dict_empty():
    """Test flattening empty dictionary."""
    result = flatten_dict({})
    assert result == {}


def test_flatten_dict_no_nesting():
    """Test flattening dictionary with no nesting."""
    flat_dict = {"a": 1, "b": 2, "c": 3}
    result = flatten_dict(flat_dict)
    assert result == flat_dict
{% else %}import unittest
import os
import tempfile
from pathlib import Path

from {{ package_name }}.utils import (
    configure_logging,
    get_project_root,
    load_environment_variables,
    ensure_directory,
    safe_file_write,
    format_file_size,
    flatten_dict,
)


class TestUtils(unittest.TestCase):
    """Test utility functions."""

    def setUp(self):
        """Set up test fixtures."""
        self.temp_dir = tempfile.mkdtemp()
        self.temp_path = Path(self.temp_dir)

    def tearDown(self):
        """Clean up test fixtures."""
        import shutil
        shutil.rmtree(self.temp_dir, ignore_errors=True)

    def test_configure_logging_basic(self):
        """Test basic logging configuration."""
        # This test mainly ensures the function doesn't crash
        configure_logging("INFO")

    def test_get_project_root(self):
        """Test getting project root directory."""
        root = get_project_root()
        self.assertIsInstance(root, Path)
        self.assertTrue(root.exists())
        self.assertTrue(root.is_dir())

    def test_load_environment_variables_nonexistent_file(self):
        """Test loading environment variables from nonexistent file."""
        result = load_environment_variables("nonexistent.env")
        self.assertIsInstance(result, dict)
        self.assertEqual(len(result), 0)

    def test_ensure_directory_new_directory(self):
        """Test creating a new directory."""
        new_dir = self.temp_path / "new" / "nested" / "directory"
        self.assertFalse(new_dir.exists())

        result = ensure_directory(new_dir)

        self.assertEqual(result, new_dir)
        self.assertTrue(new_dir.exists())
        self.assertTrue(new_dir.is_dir())

    def test_safe_file_write_new_file(self):
        """Test writing to a new file."""
        file_path = self.temp_path / "new_file.txt"
        content = "Hello, world!"

        safe_file_write(file_path, content)

        self.assertTrue(file_path.exists())
        self.assertEqual(file_path.read_text(), content)

    def test_format_file_size_basic(self):
        """Test basic file size formatting."""
        self.assertEqual(format_file_size(0), "0 B")
        self.assertEqual(format_file_size(512), "512 B")
        self.assertEqual(format_file_size(1024), "1.0 KB")
        self.assertEqual(format_file_size(1048576), "1.0 MB")

    def test_flatten_dict_simple(self):
        """Test flattening a simple nested dictionary."""
        nested = {
            "a": 1,
            "b": {
                "c": 2,
                "d": 3
            }
        }

        expected = {
            "a": 1,
            "b.c": 2,
            "b.d": 3
        }

        result = flatten_dict(nested)
        self.assertEqual(result, expected)

    def test_flatten_dict_empty(self):
        """Test flattening empty dictionary."""
        result = flatten_dict({})
        self.assertEqual(result, {})


if __name__ == "__main__":
    unittest.main()
{% endif %}