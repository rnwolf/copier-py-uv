"""Test core functionality for {{ project_name }}."""

{% if use_pytest %}import pytest

from {{ package_name }}.core import (
    calculate_statistics,
    main_function,{% if include_cli %}
    process_data,{% endif %}
    validate_input,
)


def test_main_function():
    """Test the main function returns expected result."""
    result = main_function()
    assert isinstance(result, str)
    assert "{{ project_name }}" in result
    assert len(result) > 0


def test_main_function_consistency():
    """Test that main function returns consistent results."""
    result1 = main_function()
    result2 = main_function()
    assert result1 == result2


{% if include_cli %}def test_process_data_basic(sample_data):
    """Test basic data processing functionality."""
    result = process_data(sample_data)

    assert isinstance(result, dict)
    assert "count" in result
    assert "items" in result
    assert "config" in result
    assert "success" in result

    assert result["success"] is True
    assert result["count"] == len(sample_data)
    assert len(result["items"]) == len(sample_data)


def test_process_data_with_options(sample_data):
    """Test data processing with custom options."""
    options = {"format": "yaml", "validate": False}
    result = process_data(sample_data, options)

    assert result["success"] is True
    assert result["config"]["format"] == "yaml"
    assert result["config"]["validate"] is False


def test_process_data_empty_list():
    """Test processing empty data list."""
    with pytest.raises(ValueError, match="Data cannot be empty"):
        process_data([])


def test_process_data_invalid_items(invalid_data):
    """Test processing data with some invalid items."""
    result = process_data(invalid_data)

    assert result["success"] is True
    # Should skip invalid items (those without 'name' field when validation is on)
    assert result["count"] < len(invalid_data)


def test_process_data_no_validation(invalid_data):
    """Test processing invalid data with validation disabled."""
    options = {"validate": False}
    result = process_data(invalid_data, options)

    assert result["success"] is True
    # Should process all items when validation is off
    assert result["count"] == len(invalid_data)
{% endif %}


def test_calculate_statistics_basic():
    """Test basic statistics calculation."""
    numbers = [1, 2, 3, 4, 5]
    result = calculate_statistics(numbers)

    assert isinstance(result, dict)
    assert "mean" in result
    assert "median" in result
    assert "min" in result
    assert "max" in result
    assert "count" in result

    assert result["mean"] == 3.0
    assert result["median"] == 3.0
    assert result["min"] == 1
    assert result["max"] == 5
    assert result["count"] == 5


def test_calculate_statistics_single_number():
    """Test statistics calculation with single number."""
    numbers = [42]
    result = calculate_statistics(numbers)

    assert result["mean"] == 42
    assert result["median"] == 42
    assert result["min"] == 42
    assert result["max"] == 42
    assert result["count"] == 1


def test_calculate_statistics_even_count():
    """Test median calculation with even number of values."""
    numbers = [1, 2, 3, 4]
    result = calculate_statistics(numbers)

    # Median of [1, 2, 3, 4] should be (2 + 3) / 2 = 2.5
    assert result["median"] == 2.5
    assert result["mean"] == 2.5


def test_calculate_statistics_odd_count():
    """Test median calculation with odd number of values."""
    numbers = [1, 2, 3, 4, 5]
    result = calculate_statistics(numbers)

    # Median of [1, 2, 3, 4, 5] should be 3
    assert result["median"] == 3.0


def test_calculate_statistics_unsorted_input():
    """Test statistics with unsorted input."""
    numbers = [5, 1, 4, 2, 3]
    result = calculate_statistics(numbers)

    assert result["mean"] == 3.0
    assert result["median"] == 3.0
    assert result["min"] == 1
    assert result["max"] == 5


def test_calculate_statistics_negative_numbers():
    """Test statistics with negative numbers."""
    numbers = [-5, -1, 0, 1, 5]
    result = calculate_statistics(numbers)

    assert result["mean"] == 0.0
    assert result["median"] == 0.0
    assert result["min"] == -5
    assert result["max"] == 5


def test_calculate_statistics_floats():
    """Test statistics with floating point numbers."""
    numbers = [1.1, 2.2, 3.3, 4.4, 5.5]
    result = calculate_statistics(numbers)

    assert abs(result["mean"] - 3.3) < 0.001  # Account for floating point precision
    assert result["median"] == 3.3
    assert result["min"] == 1.1
    assert result["max"] == 5.5


def test_calculate_statistics_empty_list():
    """Test statistics calculation with empty list."""
    with pytest.raises(ValueError, match="Numbers list cannot be empty"):
        calculate_statistics([])


def test_calculate_statistics_large_dataset():
    """Test statistics with large dataset."""
    numbers = list(range(1, 1001))  # 1 to 1000
    result = calculate_statistics(numbers)

    assert result["count"] == 1000
    assert result["mean"] == 500.5
    assert result["median"] == 500.5
    assert result["min"] == 1
    assert result["max"] == 1000


def test_validate_input_string():
    """Test input validation with string type."""
    assert validate_input("hello", str) is True
    assert validate_input(123, str) is False
    assert validate_input(None, str) is False


def test_validate_input_integer():
    """Test input validation with integer type."""
    assert validate_input(42, int) is True
    assert validate_input("42", int) is False
    assert validate_input(42.0, int) is False


def test_validate_input_float():
    """Test input validation with float type."""
    assert validate_input(3.14, float) is True
    assert validate_input(42, float) is False  # int is not float in Python
    assert validate_input("3.14", float) is False


def test_validate_input_list():
    """Test input validation with list type."""
    assert validate_input([1, 2, 3], list) is True
    assert validate_input((1, 2, 3), list) is False  # tuple is not list
    assert validate_input("123", list) is False


def test_validate_input_dict():
    """Test input validation with dict type."""
    assert validate_input({"key": "value"}, dict) is True
    assert validate_input([("key", "value")], dict) is False
    assert validate_input("key=value", dict) is False


def test_validate_input_none():
    """Test input validation with None values."""
    assert validate_input(None, type(None)) is True
    assert validate_input("", type(None)) is False
    assert validate_input(0, type(None)) is False


@pytest.mark.parametrize("value,expected_type,expected_result", [
    ("test", str, True),
    (123, int, True),
    (3.14, float, True),
    ([1, 2, 3], list, True),
    ({"a": 1}, dict, True),
    ("test", int, False),
    (123, str, False),
    (3.14, int, False),
    ([1, 2, 3], str, False),
])
def test_validate_input_parametrized(value, expected_type, expected_result):
    """Test input validation with various type combinations."""
    result = validate_input(value, expected_type)
    assert result == expected_result


def test_validate_input_with_mock_logger(mock_logger):
    """Test that validation logs appropriate messages."""
    # Valid input should not log warnings
    validate_input("test", str)
    warning_logs = [msg for level, msg in mock_logger if level == "WARNING"]
    assert len(warning_logs) == 0

    # Invalid input should log warning
    validate_input(123, str)
    warning_logs = [msg for level, msg in mock_logger if level == "WARNING"]
    assert len(warning_logs) == 1
    assert "Validation failed" in warning_logs[0]
{% else %}import unittest
from {{ package_name }}.core import (
    main_function,
    calculate_statistics,
    validate_input,{% if include_cli %}
    process_data,{% endif %}
)


class TestCore(unittest.TestCase):
    """Test core functionality."""

    def test_main_function(self):
        """Test the main function returns expected result."""
        result = main_function()
        self.assertIsInstance(result, str)
        self.assertIn("{{ project_name }}", result)
        self.assertGreater(len(result), 0)

    def test_main_function_consistency(self):
        """Test that main function returns consistent results."""
        result1 = main_function()
        result2 = main_function()
        self.assertEqual(result1, result2)

    {% if include_cli %}def test_process_data_basic(self):
        """Test basic data processing functionality."""
        sample_data = [
            {"id": "1", "name": "test_item_1", "value": 42},
            {"id": "2", "name": "test_item_2", "value": 84},
        ]

        result = process_data(sample_data)

        self.assertIsInstance(result, dict)
        self.assertIn("count", result)
        self.assertIn("items", result)
        self.assertIn("config", result)
        self.assertIn("success", result)

        self.assertTrue(result["success"])
        self.assertEqual(result["count"], len(sample_data))

    def test_process_data_empty_list(self):
        """Test processing empty data list."""
        with self.assertRaises(ValueError):
            process_data([])
    {% endif %}

    def test_calculate_statistics_basic(self):
        """Test basic statistics calculation."""
        numbers = [1, 2, 3, 4, 5]
        result = calculate_statistics(numbers)

        self.assertIsInstance(result, dict)
        self.assertIn("mean", result)
        self.assertIn("median", result)
        self.assertIn("min", result)
        self.assertIn("max", result)
        self.assertIn("count", result)

        self.assertEqual(result["mean"], 3.0)
        self.assertEqual(result["median"], 3.0)
        self.assertEqual(result["min"], 1)
        self.assertEqual(result["max"], 5)
        self.assertEqual(result["count"], 5)

    def test_calculate_statistics_empty_list(self):
        """Test statistics calculation with empty list."""
        with self.assertRaises(ValueError):
            calculate_statistics([])

    def test_validate_input_string(self):
        """Test input validation with string type."""
        self.assertTrue(validate_input("hello", str))
        self.assertFalse(validate_input(123, str))

    def test_validate_input_integer(self):
        """Test input validation with integer type."""
        self.assertTrue(validate_input(42, int))
        self.assertFalse(validate_input("42", int))


if __name__ == "__main__":
    unittest.main()
{% endif %}